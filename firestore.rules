rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return request.auth != null && 
             (request.auth.uid == 'admin' || 
              request.auth.token.admin == true);
    }
    
    // Users collection
    match /users/{userId} {
      // Allow reading own user data
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      
      // Allow creation and update of own user data
      allow create, update: if isAuthenticated() && request.auth.uid == userId;
      
      // Allow deletion of own user data
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Devices collection for device tracking
    match /devices/{deviceId} {
      // Allow reading own device data
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Allow creation of device data
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // Allow updating own device data
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      
      // Allow deleting own device data
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Match request rules
    match /matchRequests/{requestId} {
      // Allow reading own match requests and those that matched with you
      allow read: if isAuthenticated() && 
          (resource.data.userId == request.auth.uid || 
           resource.data.matchedWith == request.auth.uid);
      
      // Allow creating match requests with your own user ID
      allow create: if isAuthenticated() && 
          request.resource.data.userId == request.auth.uid;
      
      // Allow updating match requests you created or those matched with you
      allow update: if isAuthenticated() && 
          (resource.data.userId == request.auth.uid || 
           resource.data.matchedWith == request.auth.uid);
      
      // Allow deleting your own match requests
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Chat sessions
    match /chats/{chatId} {
      // Allow reading chat data if user is participant
      allow read: if isAuthenticated() && 
        (resource.data.participants.hasAny([request.auth.uid]) || isAdmin());
      
      // Allow creation of chat sessions
      allow create: if isAuthenticated();
      
      // Allow updating chat sessions if user is participant
      allow update: if isAuthenticated() && 
        resource.data.participants.hasAny([request.auth.uid]);
      
      // Allow deleting chat sessions if user is participant
      allow delete: if isAuthenticated() && 
        resource.data.participants.hasAny([request.auth.uid]);
      
      // Messages in chats
      match /messages/{messageId} {
        // Allow reading messages if user is participant in parent chat
        allow read: if isAuthenticated();
        
        // Allow creating messages if user is participant in parent chat
        allow create: if isAuthenticated() && 
            request.resource.data.senderId == request.auth.uid;
        
        // No updates to messages
        allow update: if false;
        
        // Allow deletion of own messages
        allow delete: if isAuthenticated() && resource.data.senderId == request.auth.uid;
      }
    }
    
    // TEMPORARY - FOR DEVELOPMENT ONLY - REMOVE IN PRODUCTION
    // Temporarily allow all operations during development to debug issues
    match /{document=**} {
      allow read, write: if true;
    }
  }
} 